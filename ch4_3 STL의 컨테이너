ch4_3 STL의 컨테이너
* 벡터(vector) : 배열과 비슷
* 셋(set/집합) : 중복을 허용하지 않고, 저장된 데이터를 자동으로 정렬하는 컨테이너
* 맵(map) : 키(중복 없음, 유일함)와 값을 쌍(entry, std::pair)으로 갖는 컨테이너, 키값을 기준으로 데이터 자동 정렬
* 정렬되지 않은 셋과 맵


* STL의 컨테이너
  : 데이터를 저장하는 객체(vector, set, map...)
* 벡터(vector) : 배열과 비슷
  #include<vector>
  #include<iostream>
  using namespace std;
  int main() {
    //1차원 벡터
    vector<int> v1; //빈 벡터
    vector<int> v2 = {1, 2, 3, 4, 5}; //초기화 리스트를 사용한 벡터 초기화
    vector<int> v3(4, 3); //특정 값으로 초기화된 벡터/v3 == {3, 3, 3, 3}
    vector<int> v4(v3); //v4 == v3 복사해서 독립된 새로운 벡터를 만듬
    //2차원 벡터
    vector<vector<int>> v1; //빈 벡터 선언
    int rows = 3;
    int cols = 4;
    vector<vector<int>> v2(rows, vector<int>(cols)); //특정 크기로 초기화된 벡터
    int val = 9;
    vector<vector<int>> v3(rows, vector<int>(cols, val)); //특정 값으로 초기화된 벡터
    vector<vector<int>> v4 = {; //초기화 리스트를 사용한 벡터 초기화
      {1, 2, 3},
      {4, 5, 6},
      {7, 8, 9}
    };
  }
  - 벡터의 원소 변경(O(1)) : 인덱스 사용(예:vec[2] = 1; //인덱스 2의 원소를 1로 수정)
  - 벡터의 삽입과 삭제(O(1))
    #include<iostream>
    #include<vector>
    using namespace std;
    int main() {
      vector<int> v = {2, 3, 4, 5};
      v.push_back(6); //맨 뒤에 원소 삽입/v == {2, 3, 4, 5, 6}
      v.pop_back(); //맨 뒤의 원소 삭제/v == {2, 3, 4, 5}
      v.insert(v.begin(), 1); //맨 앞에 원소 삽입/v == {1, 2, 3, 4, 5}
      v.erase(v.begin()); //맨 앞의 원소 삭제/v == {2, 3, 4, 5}
      return 0;
    }
*셋(set/집합) : 중복을 허용하지 않고, 저장된 데이터를 자동으로 정렬하는 컨테이너
  #include<iostream>
  #include<set>
  using namespace std;
  int main() {
    //셋의 선언 및 초기화
    set<int> s1; //빈 셋 선언
    set<int> s2 = {3, 1, 3, 2, 5}; //초기화 리스트를 사용한 셋 초기화/s2 == {1, 2, 3, 5}
    set<int> s3(s2); //다른 셋을 사용하여 초기화
    //셋에서 원소 탐색(O(logN))
    set<int> numbers = {1, 2, 3, 4, 5};
    int targets[] = {3, 7}; //원소가 3과 7인 배열
    for(int target : targets) {
      auto it = numbers.find(target); //set에서 원소를 탐색하는 방법
      if(it != numbers.end()) {
        cout << "원소 " << target << "을 찾았습니다. 값: " << *it << endl;
      } else {
        cout << "원소 " << target << "을 찾지 못했습니다." << endl;
      } 
    } //츨력: 원소 3을 찾았습니다. 값: 3/n원소 7을 찾지 못했습니다.
    //셋의 삽입과 삭제(O(logN))
    set<int> s = {1, 3, 2, 1, 5}; //s == {1, 2, 3, 5}
    s.insert(4); //s == {1, 2, 3, 4, 5}
    s.erase(2);  //s == {1, 3, 4, 5}
    auto it = s.find(4);
    if(it!= s.end()){ s.erase(it); } //원소 4가 있으면 삭제, end 반복자는 s가 가지고 있는 원소의 주소가 아님/s == {1, 3, 5}
    return 0;
  }
*맵(map) : 키(중복 없음, 유일함)와 값을 쌍(entry, std::pair)으로 갖는 컨테이너, 키값을 기준으로 데이터 자동 정렬 O(logN)
  #include<iostream>
  #include<map>
  #include<string>
  using namespace std;
  int main(){
    map<string, double> employeeSalaries; //빈 맵 선언
    map<string, double> studentGrade = { //{키, 값}
      {"John", 3.7},
      {"Emma", 3.9},
      {"Sophia", 4.0}
    }; //초기화 리스트를 사용한 맵 초기화
    map<string, int> studentScores; //맵 생성
    studentScores["Alice"] = 95; //키-값 쌍 추가
    studentScores["Bob"] = 88;
    studentScores["Charlie"] = 92;
    int score1 = studentScores["Alice"]; //score1 == 95
    int score2 = studentScores["rabbit"]; //새로 생성/score2 == 0
    auto it = studentScores.find("Charlie");
    if(it != studentScores.end()){
      int score3 = it->second; //score3 == 92
    }
    map<string, int> myMap = {{"Apple", 1}, {"Banana", 2}, {"Charry", 3}};
    myMap["Banana"] = 10; //{"Banana", 2} -(값 변경)-> {"Banana", 10}
    map<int, string> myMap;
    //삽입
    myMap.insert(make_pair(1, "Apple"));
    myMap.insert({2, "Banana"});
    myMap[3] = "Cherry";
    //myMap ==  {{1, "Apple"}, {2, "Banana"}, {3, "Cherry"}}
    //삭제
    myMap.erase(2)
    //myMap ==  {{1, "Apple"}, {3, "Cherry"}}
    auto it = myMap.find(3);
    if(it != myMap.end()){
      myMap.erase(it);
    }
    //myMap ==  {{1, "Apple"}}
    return 0;
  }
*정렬되지 않은 셋과 맵
  #include<iostream>
  #include<unorderd_set>
  #include<unorderd_map>
  using namespace std;
  int main(){
    unordered_set<int> myUnorderedSet;
    myUnorderedSet.insert(3);
    myUnorderedSet.insert(1);
    myUnorderedSet.insert(4);
    myUnorderedSet.insert(2);
    //myUnorderedSet == {2, 4, 1, 3}
    for(int num : myUnorderedSet0{
      cout << num << " ";
    }
    cout << endl;
    unordered_map<int> myUnorderedMap;
    myUnorderedMap["apple"] = 3;
    myUnorderedMap["banana"] = 1;
    myUnorderedMap["cherry"] = 4;
    myUnorderedMap["date"] = 2;
    //myUnorderedMap == {{"date", 2},{"cherry", 4} , {"banana", 1}, {"apple", 3}}
    for(const auto& pair : myUnorderedMap){
      cout << pair.first << ": " << pair.second << endl;
    return 0;
  }
