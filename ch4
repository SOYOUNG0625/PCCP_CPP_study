ch4_1
* 빌드인 데이터 타입
  - 정수형(int)
    int a = 13;
  - 부동소수형(float/double)
    float f = 1.5f; //4bytes
    double d = 2.5; //8bytes
    - 형 변환
      #include<iostream>
      using namespace std;
      int main(){
        int i = 65;
        float f = 5.2f;
        double d = i + f; //암시적 형 변환
        cout << d << endl; //70.2
        cout << static_cast<int>(d) << endl; //70
        cout << static_cast<char>(i) << endl; //'A'
      return 0;
      }
  - 논리형(bool)
    
  - 문자형(char)
    -문자열
      #include<iostream>
      #include<string>
      using namespace std;
      int main(){
        string s1; //빈 문자열 선언
        string s2 = "Hello World!"; //문자열 직접 초기화
        string s3(s2); // 문자옇 복사
        stirng s4(s2, 0, 5); // 문자열 부분 복사 초기화 /"Hello"
        string s5(10, *); //반복된 문자로 문자열 초기화 /"**********"
        return 0;
      }
    - 문자열 찾기 (O(N))
      find(찾으려는 문자열), find(찾으려는 문자열, 탐색 시작 위치) : 해당 문자열이 시작하는 인덱스 위치 반환(없으면 string::nops(= 18446744073709551615) 반환
      size_t pos = s2.find("Hello"); //pos == 0; , size_t는 컨테이너나 문자열의 크기 및 인덱스를 표현할 때 사용
    - 문자열 추가, 수정
      #include<iostrean>
      #include<string>
      using namespace std;
      int main(){
        string s = "APPLE";
        s += ", World!"; //s == "APPLE, World!"
        s[7] = 'P'; //s == "APPLE, Porld!"
        str.replace(7, 4, "Col"); //s == "APPLE, Cold!" (Porl -> Col)
        return 0;
      }
  - 배열(array)
ch4_2
* STL
  : C++에서 제공하는 템플릿 기반의 표준 라이브러리
  - 구성
    - 컨테이너(container)
    - 알고리즘(algorithm)
    - 반복자(iterator)
* STL과 자주 사용하는 필수 문법
  - 상수 레퍼런스
    - call by value : 함수의 인수로 값을 전달할 떄 값을 복사
      #include<iostream>
      using namespace std;
      void modify(int value){
        value = 10; //vlaue 주소 : 0x7fff84f16e5c(새 공간), 값 : 10
      } //함수가 종료되면 modify() 함수의 value는 메모리에서 사라짐
      int main(){
        int vlaue = 5; //vlaue 주소 : 0x7fff84f16e74, 값 : 5
        modify(value); //main() 함수의 value 안 바뀜
        return 0; //vlaue 주소 : 0x7fff84f16e74, 값 : 5
      }
    - call by reference : 복사하지 않고 레퍼런스(&)를 활용해 넘김
      #include<iostream>
      using namespace std;
      void modify(int& value){
        value = 10; //vlaue 주소 : 0x7fff84f16e74, 값 : 10
      } //함수가 종료되면 modify() 함수의 value는 메모리에서 사라짐
      int main(){
        int vlaue = 5; //vlaue 주소 : 0x7fff84f16e74, 값 : 5
        modify(value); //main() 함수의 value 바뀜
        return 0; //vlaue 주소 : 0x7fff84f16e74, 값 : 10
      }
  - 참조값(&) 전달과 주소값(*) 전달의 공통점과 차이점은?
    - 공통점 1 : 실 인수값을 변경할 수 있다.
    - 차이점 1 : 참조값을 전달하면 참조 변수와 참조 대상 변수의 주소값이 일치하므로 메모리의 값을 읽고 쓰기 위한 문법이 필요 없다.
    - 차이점 2 : 주소값을 전달하면 주소값을 전달받은 변수의 주소와 실제 변수의 주소값이 다르다. 그래서 주소값을 받기 위한 포인터 변수를 사용해야한다. 즉, 포인터 문법이 필요.
    - 불편함 1 : 포인터를 사용하면 의도하지 않은 예외가 발생할 수 있다.(예: 잘못된 주소 접근)
    - 불편함 2 : 포인터의 문법은 복잡하다.
  - auto문 : 변수의 타입을 자동으로 추론
    #include<iostream>
    #include<vector>
    #include<map>
    #include<string>
    using namespace std;
    int main(){
      auto num = 42; //int로 추론
      auto pi = 3.14159; //double로 추론
      auto greeting = strint("Hello, wprld!"); //string으로 추론
      return 0;
    }
  - 범위 기반 반복문 : 배열이나 컨테이너의 모든 원소를 순회할 때 사용
    #include<iostream>
    #include<vector>
    #include<map>
    #include<map>
    using namespace std;
    int main(){
      //vector
      vector<int> vet = {1, 2, 3, 4, 5};
      for(int num : vet) { //(타입 변수명 : 컨테이너)
        cout << num << " "; //출력: 1 2 3 4 5
      }
      //map
      map<string, int> fruitMap = {{"apple", 1}, {"banana", 2}, {"charry", 3}};
      for(const auto& pair : fruitMap) { //(타입 변수명 : 컨테이너)
        cout << pair.first << "=" << pair.second << " "; //출력: apple = 1 banana = 2 charry = 3
      }
      //set
      set<string> fruitSet = {"apple", "banana"m "charry"};
      for(const auto& fruit : fruitSet) { //(타입 변수명 : 컨테이너)
        cout << fruit << " "; //출력: apple banana charry
      }
    }
* 반복자(iterator): 컨테이너의 종류와 솬계없이 원소들을 순회하고 접근할 수 있게 해줌
  - 순방향 반복자(forward iterator) : begin()첫 원소의 위치, end()마지막 원소의 위치
    - 컨테이너를 순회하는 과정이 있는 STL의 특징
      1. 대부분 시작 위치와 끝 위치를 받고 이때 시작 위치는 begin(), 끝 위치는 end()로 넘기는 경우가 많다. 이는 begin()부터 end()바로 직전까지 순회라는 의미이다.
      2. 특정 원소를 탐색하거나 조건에 맞는 원소를 찾는 의 경우에는 해당 원소를 찾으면 위치를 반환하고, 그렇지 않으면 end()를 반환한다.
    #include<iostream>
    #include<algorithm>
    #include<vector>
    #include<map>
    using namespace std;
    int main(){
      //vector
      vector<int> vec = {10, 20, 30, 40, 50};
      for(auto it = vec.begin(); it != vec.end(), ++it) {
        cout << *it << " ";
      } cout << endl; //출력: 10 20 30 40 50
      auto result = find(vec.begin(), vec.end(), 30);
      if(result != vec.end()) {
        cout << "Found: " << *result << endl;
      } else {
        cout << "Not found" << endl;
      } //출력: 30
      //map
      map<string, int> myMap = {{"apple, 1}, {"banana", 2}, {"charry", 3}};
      for(auto it = myMap.begin(); it != myMap.end(); ++it) {
        cout << it->first << ":" << it->second << " "; //출력: apple:1 banana:2 charry:3
      }
      auto result = myMap.find("banana");
      if(result != myMap.end()) {
        cout << "Found: " << result->first << "->" << result->second << endl;
      } else {
        cout << "Not found" << endl;
      } //출력: Found: banana->2
      return 0;
    }
  - 역순방향 반복자 : 컨테이너의 끝에서 시작으로 이동, 기본적인 개념은 같으나 ++연산자를 쓸 떄 뒤로 가는 것이 아닌 반대로 앞으로 간다.
    rbegin()마지막 원소의 위치, rend()첫 원소의 바로 직전 위치
    위 코드의 begin자리에 rbegin이 들어가고 end자리에 rend이 들어간다.
      - 출력값은 각각 역순으로 출력된다.
ch4_3
* STL의 컨테이너
  : 데이터를 저장하는 객체(vector, set, map...)
* 벡터(vector) : 배열과 비슷
  #include<vector>
  #include<iostream>
  using namespace std;
  int main() {
    //1차원 벡터
    vector<int> v1; //빈 벡터
    vector<int> v2 = {1, 2, 3, 4, 5}; //초기화 리스트를 사용한 벡터 초기화
    vector<int> v3(4, 3); //특정 값으로 초기화된 벡터/v3 == {3, 3, 3, 3}
    vector<int> v4(v3); //v4 == v3 복사해서 독립된 새로운 벡터를 만듬
    //2차원 벡터
    vector<vector<int>> v1; //빈 벡터
    int rows = 3;
    int cols = 4;
    vector<vector<int>> v2(rows, vector<int>(cols)); //특정 크기로 초기화된 벡터
    int val = 9;
    vector<vector<int>> v3(rows, vector<int>(cols, val)); //특정 값으로 초기화된 벡터
    vector<vector<int>> v4 = {; //초기화 리스트를 사용한 벡터 초기화
      {1, 2, 3},
      {4, 5, 6},
      {7, 8, 9}
    };
  }
  - 벡터의 원소 변경(O(1)) : 인덱스 사용(예:vec[2] = 1; //인덱스 2의 원소를 1로 수정)
  - 벡터의 삽입과 삭제(O(1))
    #include<iostream>
    #include<vector>
    using namespace std;
    int main() {
      vector<int> v = {2, 3, 4, 5};
      v.push_back(6); //맨 뒤에 원소 삽입/v == {2, 3, 4, 5, 6}
      v.pop_back(); //맨 뒤의 원소 삭제/v == {2, 3, 4, 5}
      v.insert(v.begin(), 1); //맨 앞에 원소 삽입/v == {1, 2, 3, 4, 5}
      v.erase(v.begin()); //맨 앞의 원소 삭제/v == {2, 3, 4, 5}
      return 0;
    }
*셋(set/집합) : 중복을 허용하지 않고, 저장된 데이터를 자동으로 정렬하는 컨테이너
  #include<iostream>
  #include<set>
  using namespace std;
  int main() {
    //셋의 선언 및 초기화
    set<int> s1; //빈 셋 선언
    set<int> s2 = {3, 1, 3, 2, 5}; //초기화 리스트를 사용한 셋 초기화/s2 == {1, 2, 3, 5}
    set<int> s3(s2); //다른 셋을 사용하여 초기화
    //셋에서 원소 탐색(O(logN))
    set<int> numbers = {1, 2, 3, 4, 5};
    int targets[] = {3, 7}; //원소가 3과 7인 배열
    for(int target : targets) {
      auto it = numbers.find(target); //set에서 원소를 탐색하는 방법
      if(it != numbers.end()) {
        cout << "원소 " << target << "을 찾았습니다. 값: " << *it << endl;
      } else {
        cout << "원소 " << target << "을 찾지 못했습니다." << endl;
      } 
    } //츨력: 원소 3을 찾았습니다. 값: 3/n원소 7을 찾지 못했습니다.
    //셋의 삽입과 삭제(O(logN))
    set<int> s = {1, 3, 2, 1, 5}; //s == {1, 2, 3, 5}
    s.insert(4); //s == {1, 2, 3, 4, 5}
    s.erase(2);  //s == {1, 3, 4, 5}
    return 0;
  }
  
ch4_4
ch4_5
ch4_6
