ch4_4 STL의 알고리즘
* count() 함수로 횟수 세기 O(N)
* sort() 함수로 정렬하기 O(NlogN)
* next_permutation() 함수로 순열 생성하기 O(N*N!)
* unique() 함수로 중복 정리하기 O(N)
* binary_search() 함수로 이진 탐색하기 O(logN)
* max_element(), min_element() 함수로 최댓값, 최솟값 위치 구하기 O(N)


*count() 함수로 횟수 세기 O(N)
  #include<iostream>
  #include<vector>
  #include<algorithm>
  using namespace std;
  int main(){
    vector<int> v = {1, 4, 3, 4, 5, 4, 5};
    int ret = count(v.begin(), v.end(), 5); //ret == 2
    return 0;
  }
*sort() 함수로 정렬하기 O(NlogN)
  //인수 2개
  #include<iostream>
  #include<vector>
  #include<algorithm>
  using namespace std;
  int main(){
    vector<int> v = {1, 4, 3, 4, 5, 4, 5};
    sort(v.begin(), v.end()); //오름차순 v == {1, 2, 3, 4, 5}
    sort(v.rbegin(), v.rend()); //내림차순 v == {5, 4, 3, 2, 1}
    return 0;
  }
  //인수 3개
  #include<algorithm>
  #include<iostream>
  #include<vector>
  using namespace std;
  struct Point{
    int x, y;
    Ponit(int x, int y) : x(x), y(y) {}
  };
  bool compare(const Point &a, const Point &b){
    if(a.x == b.x){
      return a.y < b.y;
    }
    return a.x < b.x;
  }
  int main(){
    vector<Point> points = {{3, 4}, {1, 2}, {3, 1}, {2, 5}};
    sort(points.begin(), points.end(), compare); //반환값이 false일 때 원소의 위치를 바꿈
    for(const Point &p : points){
      cout << "(" << p.x << ", " << p.y << ")";
    } //(1, 2), (2, 5), (3, 1), (3, 4)
    cout << endl;
    return 0;
  }
*next_permutation() 함수로 순열 생성하기 O(N*N!)
 : 가능한 모든 순열 생성(사전 순), 가능한 순열이 있으면 true를 반환, 더 이상 없으면 false 반환 **데이터는 원래 사전순으로 정렬되어있어야함**
  #include<iostream>
  #include<algorithm>
  #include<vector>
  using namespace std;
  int main(){
    vector<int> v = {1, 2, 3};
    do{
      for(int i : v){
        cout << i << " "; 
      }
      cout << endl;
    } while(next_permutation(v.begin(), v.end()));
    return 0;
  }
  /* 출력값
  1 2 3
  1 3 2
  2 1 3
  2 3 1
  3 1 2
  3 2 1
  */
*unique() 함수로 중복 정리하기 O(N)
  : 중복되는 원소들을 뒤로 밀어내고 중복되지 않은 원소들만 남겨 새로운 범위의 끝 반복자를 반환한다. 
  #include<iostream>
  #include<algorithm>
  #include<vector>
  using namespace std;
  int main() {
  	vector<int> v = { 1, 2, 2, 3, 3, 3, 4, 4, 5, 5, 5 };
  	auto newEnd = unique(v.begin(), v.end());
  	for (auto it = v.begin(); it != newEnd; ++it) {
  		cout << *it << " "; //1 2 3 4 5
  	}cout << endl;
  	cout << v.size() << endl; //11
  	for (auto it = v.begin(); it != v.end(); ++it) {
  		cout << *it << " "; //1 2 3 4 5 3 4 4 5 5 5
  	}cout << endl;
  	return 0;
  }
*binary_search() 함수로 이진 탐색하기 O(logN)
  : 시작 반복자, 끝 반복자, 찾을 값, 반환값은 true/false
  #include<iostream>
  #include<algorithm>
  #include<vector>
  using namespace std;
  int main() {
  	vector<int> v = { 1, 2, 3, 4, 5 };
    cout << binary_search(v.bigin(), v.end(), 3) << endl; //1
    cout << binary_search(v.bigin(), v.end(), 7) << endl; //0
  	return 0;
  }
*max_element(), min_element() 함수로 최댓값, 최솟값 위치 구하기 O(N)
  : 시작 반복자, 끝 반복자
  #include<iostream>
  #include<algorithm>
  #include<vector>
  using namespace std;
  int main() {
  	vector<int> v = { 1, 3, 5, 7, 2, 4, 6 };
    auto maxIt = max_element(v.bigin(), v.end());
    auto minIt = min_element(v.bigin(), v.end());
    cout << *maxIt << endl; //7
    cout << *minIt << endl; //1
  	return 0;
  }
